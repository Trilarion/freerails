/*
 * FreeRails
 * Copyright (C) 2000-2018 The FreeRails Team
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

/*
 *
 */
package freerails.move.generator;

import freerails.model.finance.transaction.Transaction;
import freerails.model.game.Time;
import freerails.model.track.TrackType;
import freerails.move.AddTransactionMove;
import freerails.move.CompositeMove;
import freerails.move.Move;
import freerails.move.mapupdatemove.ChangeTrackPieceMove;
import freerails.model.world.UnmodifiableWorld;
import freerails.model.ModelConstants;
import freerails.model.finance.transaction.ItemTransaction;
import freerails.model.finance.Money;
import freerails.model.finance.transaction.TransactionCategory;
import freerails.model.player.Player;
import freerails.model.track.TrackCategory;
import freerails.model.track.TrackPiece;

import java.util.ArrayList;
import java.util.List;

/**
 * Calculates the cost of a series of track moves. The motivation for
 * separating this code from the code that generates track moves is that the
 * transaction will be generated by the server whereas the track moves will be
 * generated by a client.
 */
public class TrackMoveTransactionsGenerator {

    private final Player player;
    /*
     * Note, trackAdded and trackRemoved cannot be combined, since it may cost
     * more to added a unit of track than is refunded when you removed it.
     */
    private final List<Transaction> transactions = new ArrayList<>();
    private final UnmodifiableWorld world;
    /**
     * Number of each of the track types added.
     */
    private int[] trackAdded;
    // TODO use Money?
    private long fixedCostsStations = 0;
    private long fixedCostsBridges = 0;
    /**
     * Number of each of the track types removed.
     */
    private int[] trackRemoved;

    /**
     * @param player the Player on behalf of which this object generates
     *          transaction for
     */
    public TrackMoveTransactionsGenerator(UnmodifiableWorld world, Player player) {
        this.world = world;
        this.player = player;
    }

    // TODO we do not want to use transactions here, rather add them to the changetrackmoves
    /**
     * @param move
     * @return
     */
    public CompositeMove addTransactions(Move move) {
        // TODO this only takes track into account, not stations
        int numberOfTrackTypes = world.getTrackTypes().size();
        trackAdded = new int[numberOfTrackTypes];
        trackRemoved = new int[numberOfTrackTypes];
        fixedCostsStations = 0;
        fixedCostsBridges = 0;
        unpackMove(move);
        // generate transaction
        transactions.clear();
        Time time = world.getClock().getCurrentTime();

        // For each track type, generate a transaction if any pieces of the type have been added or removed.
        for (int i = 0; i < trackAdded.length; i++) {
            int numberAdded = trackAdded[i];

            if (0 != numberAdded) {
                Money price = world.getTrackType(i).getPurchasingPrice();
                // TODO Money arithmetic
                Money total = new Money(-price.amount * numberAdded / ModelConstants.LENGTH_OF_STRAIGHT_TRACK_PIECE);
                Transaction transaction1 = new ItemTransaction(TransactionCategory.TRACK, total, time, numberAdded, i);
                transactions.add(transaction1);
            }

            int numberRemoved = trackRemoved[i];

            if (0 != numberRemoved) {
                Money price = world.getTrackType(i).getPurchasingPrice();
                // TODO Money arithmetic
                Money total = new Money(price.amount * numberRemoved / ModelConstants.LENGTH_OF_STRAIGHT_TRACK_PIECE);

                // You only get half the money back.
                total = Money.divide(total, 2);

                Transaction transaction1 = new ItemTransaction(TransactionCategory.TRACK, total, time, -numberRemoved, i);
                transactions.add(transaction1);
            }
        }
        if (0 != fixedCostsStations) {
            Transaction transaction1 = new Transaction(TransactionCategory.STATIONS, new Money(fixedCostsStations), time);
            transactions.add(transaction1);
        }
        if (0 != fixedCostsBridges) {
            Transaction transaction1 = new Transaction(TransactionCategory.BRIDGES, new Money(fixedCostsBridges), time);
            transactions.add(transaction1);
        }

        int numberOfMoves = 1 + transactions.size();
        List<Move> moves = new ArrayList<>(numberOfMoves);
        moves.add(move);

        for (Transaction transaction: transactions) {
            moves.add(new AddTransactionMove(player, transaction, true));
        }

        return new CompositeMove(moves);
    }

    private void unpackMove(Move move) {
        if (move instanceof ChangeTrackPieceMove) {
            ChangeTrackPieceMove tm = (ChangeTrackPieceMove) move;
            // process move
            TrackPiece newTrackPiece = tm.getNewTrackPiece();
            TrackPiece oldTrackPiece = tm.getOldTrackPiece();

            if (oldTrackPiece != null && newTrackPiece != null) {
                int oldLength = oldTrackPiece.getTrackConfiguration().getLength();
                int newLength = newTrackPiece.getTrackConfiguration().getLength();

                // TODO instead of comparing ids, use equal (which does the same)
                int ruleBefore = oldTrackPiece.getTrackType().getId();
                int ruleAfter = newTrackPiece.getTrackType().getId();

                TrackType newTrackRule = newTrackPiece.getTrackType();

                if (ruleAfter != ruleBefore) {
                    TrackCategory category = newTrackRule.getCategory();
                    switch (category) {
                        case STATION: {
                            // TODO Money arithmetic
                            // TODO was getFixedCost(), now not anymore, was is meaning of fixed cost?
                            fixedCostsStations -= newTrackRule.getYearlyMaintenance().amount;
                            break;
                        }
                        case BRIDGE: {
                            // TODO Money arithmetic
                            // TODO was getFixedCost(), now not anymore, was is meaning of fixed cost?
                            fixedCostsBridges -= newTrackRule.getYearlyMaintenance().amount;
                            break;
                        }
                        default: {
                        }
                    }
                }

                if (ruleAfter == ruleBefore) {
                    if (oldLength < newLength) {
                        trackAdded[ruleAfter] += newLength - oldLength;
                    } else if (oldLength > newLength) {
                        trackRemoved[ruleAfter] += oldLength - newLength;
                    }

                    return;
                }
            }

            if (oldTrackPiece == null) {
                int ruleAfter = newTrackPiece.getTrackType().getId();
                int newLength = newTrackPiece.getTrackConfiguration().getLength();
                // TODO trackAdded should be a Map
                trackAdded[ruleAfter] += newLength;
            }

            if (newTrackPiece == null) {
                int ruleBefore = oldTrackPiece.getTrackType().getId();
                int oldLength = oldTrackPiece.getTrackConfiguration().getLength();
                // TODO trackRemoved should be a Map (id, int)
                trackRemoved[ruleBefore] += oldLength;
            }
        } else if (move instanceof CompositeMove) {
            // TODO does this ever happen?
            CompositeMove cm = (CompositeMove) move;
            List<Move> moves = cm.getMoves();

            for (Move move1 : moves) {
                unpackMove(move1);
            }
        }
    }

}