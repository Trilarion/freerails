/*
 * FreeRails
 * Copyright (C) 2000-2018 The FreeRails Team
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

/*
 * SelectEnginePanel.java
 *
 */

package freerails.client.view;

import freerails.client.renderer.RendererRoot;
import freerails.controller.ModelRoot;
import freerails.world.SKEY;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import java.awt.*;
import java.awt.event.ActionListener;

/**
 * Lets the user select an engine from a list.
 */
public class SelectEnginePanel extends JPanel implements View {

    private static final long serialVersionUID = 4122537730158179638L;
    private JButton cancelButton;
    private JList list1;
    private JButton okButton;

    public SelectEnginePanel() {
        initComponents();
        list1ValueChanged(null); // Disable the ok button if no engine type
        // is selected.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the FormEditor.
     */
    private void initComponents() {
        GridBagConstraints gridBagConstraints;

        okButton = new JButton();
        cancelButton = new JButton();
        JScrollPane jScrollPane1 = new JScrollPane();
        list1 = new JList();

        setLayout(new GridBagLayout());

        setPreferredSize(new Dimension(400, 350));
        okButton.setText("OK");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new Insets(10, 10, 9, 10);
        add(okButton, gridBagConstraints);

        cancelButton.setText("Cancel");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new Insets(10, 10, 10, 10);
        add(cancelButton, gridBagConstraints);

        list1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        list1.addListSelectionListener(this::list1ValueChanged);

        jScrollPane1.setViewportView(list1);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.anchor = GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jScrollPane1, gridBagConstraints);

    }


    private void list1ValueChanged(ListSelectionEvent evt) {
        // We need to disable the OK button if no engine type is selected.

        if (-1 == list1.getSelectedIndex()) {
            okButton.setEnabled(false);
        } else {
            okButton.setEnabled(true);
        }
    }


    /**
     * @param modelRoot
     * @param vl
     * @param closeAction
     */

    public void setup(ModelRoot modelRoot, RendererRoot vl, Action closeAction) {

        list1.setModel(new WorldToListModelAdapter(modelRoot.getWorld(), SKEY.ENGINE_TYPES));
        list1.setCellRenderer(new TrainCellRenderer(vl));
        okButton.addActionListener(closeAction);
    }

    /**
     * Removes any existing ActionListener listeners from the cancel button,
     * then adds the specified one.
     */
    void setCancelButtonActionListener(ActionListener l) {
        ActionListener[] oldListeners = cancelButton.getActionListeners();
        for (ActionListener oldListener : oldListeners) {
            cancelButton.removeActionListener(oldListener);
        }
        cancelButton.addActionListener(l);
    }

    /**
     * Returns the number of the currently selected engine type.
     */
    public int getEngineType() {
        return list1.getSelectedIndex();
    }

}
