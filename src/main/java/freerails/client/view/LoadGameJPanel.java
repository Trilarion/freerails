/*
 * FreeRails
 * Copyright (C) 2000-2018 The FreeRails Team
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

/*
 * LoadGameJPanel.java
 *
 */

package freerails.client.view;

import freerails.client.renderer.RendererRoot;
import freerails.controller.MessageToServer;
import freerails.controller.ModelRoot;
import freerails.controller.ModelRoot.Property;
import freerails.network.LoadGameMessageToServer;
import freerails.network.RefreshListOfGamesMessageToServer;
import freerails.util.ImStringList;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;

/**
 */
@SuppressWarnings("unused")
public class LoadGameJPanel extends javax.swing.JPanel implements View {

    private static final long serialVersionUID = -6810248272441137826L;
    ModelRoot modelRoot;
    ActionListener close;
    // Variables declaration - do not modify                     
    javax.swing.JButton cancelButton;
    javax.swing.JLabel jLabel1;
    javax.swing.JList jList1;
    javax.swing.JScrollPane jScrollPane1;
    javax.swing.JButton okButton;
    javax.swing.JButton refreshButton;
    private ImStringList lastFiles;

    /**
     * Creates new form LoadGameJPanel
     */
    public LoadGameJPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code
    // ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.addListSelectionListener(this::jList1ValueChanged);

        jScrollPane1.setViewportView(jList1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        add(jScrollPane1, gridBagConstraints);

        jLabel1.setText("Please select a game to load.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        add(jLabel1, gridBagConstraints);

        okButton.setText("OK");
        okButton.addActionListener(this::okButtonActionPerformed);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        add(okButton, gridBagConstraints);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(this::cancelButtonActionPerformed);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        add(cancelButton, gridBagConstraints);

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(this::refreshButtonActionPerformed);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        add(refreshButton, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_refreshButtonActionPerformed
        MessageToServer refreshGames = new RefreshListOfGamesMessageToServer(2);
        modelRoot.sendCommand(refreshGames);
    }// GEN-LAST:event_refreshButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cancelButtonActionPerformed
        if (null != close)
            close.actionPerformed(evt);
    }// GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_okButtonActionPerformed
        String filename = (String) jList1.getSelectedValue();
        MessageToServer message2 = new LoadGameMessageToServer(1, filename);
        modelRoot.sendCommand(message2);

        if (null != close)
            close.actionPerformed(evt);
    }// GEN-LAST:event_okButtonActionPerformed

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {// GEN-FIRST:event_jList1ValueChanged
        okButton.setEnabled(jList1.getSelectedIndex() != -1);
    }// GEN-LAST:event_jList1ValueChanged

    /**
     * @param m
     * @param vl
     * @param closeAction
     */
    public void setup(ModelRoot m, RendererRoot vl, Action closeAction) {
        this.close = closeAction;
        modelRoot = m;
        updateListOfFiles();
    }

    private void updateListOfFiles() {
        ImStringList files = (ImStringList) modelRoot
                .getProperty(Property.SAVED_GAMES_LIST);
        Object[] saves = new Object[files.size()];
        for (int i = 0; i < files.size(); i++) {
            saves[i] = files.get(i);
        }
        jList1.setListData(saves);
        okButton.setEnabled(jList1.getSelectedIndex() != -1);
        lastFiles = files;
    }

    @Override
    protected void paintComponent(Graphics g) {
        ImStringList files = (ImStringList) modelRoot
                .getProperty(Property.SAVED_GAMES_LIST);
        if (!lastFiles.equals(files)) {
            updateListOfFiles();
        }
        super.paintComponent(g);
    }
    // End of variables declaration                   

}
