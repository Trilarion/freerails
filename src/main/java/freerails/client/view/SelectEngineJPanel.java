/*
 * FreeRails
 * Copyright (C) 2000-2018 The FreeRails Team
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

/*
 * SelectEngineJPanel.java
 *
 */

package freerails.client.view;

import freerails.client.renderer.RendererRoot;
import freerails.controller.ModelRoot;
import freerails.world.SKEY;
import freerails.world.train.EngineType;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.Map;

/**
 * This JPanel lets the user select an engine from a list.
 */
public class SelectEngineJPanel extends javax.swing.JPanel implements View {

    private static final long serialVersionUID = 4122537730158179638L;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton canceljButton;
    private javax.swing.JList jList1;
    private javax.swing.JButton okjButton;

    public SelectEngineJPanel() {
        initComponents();
        jList1ValueChanged(null); // Disable the ok button if no engine type
        // is selected.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the FormEditor.
     */
    private void initComponents() {// GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        okjButton = new javax.swing.JButton();
        canceljButton = new javax.swing.JButton();
        JScrollPane jScrollPane1 = new JScrollPane();
        jList1 = new javax.swing.JList();

        setLayout(new java.awt.GridBagLayout());

        setPreferredSize(new java.awt.Dimension(400, 350));
        okjButton.setText("OK");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 9, 10);
        add(okjButton, gridBagConstraints);

        canceljButton.setText("Cancel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(canceljButton, gridBagConstraints);

        jList1
                .setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1
                .addListSelectionListener(this::jList1ValueChanged);

        jScrollPane1.setViewportView(jList1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jScrollPane1, gridBagConstraints);

    }// GEN-END:initComponents

    @SuppressWarnings("unused")
    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) { // GEN-FIRST:event_jList1ValueChanged
        // We need to disable the OK button if no engine type is selected.

        if (-1 == jList1.getSelectedIndex()) {
            okjButton.setEnabled(false);
        } else {
            okjButton.setEnabled(true);
        }
    } // GEN-LAST:event_jList1ValueChanged

    // End of variables declaration//GEN-END:variables

    /**
     * @param mr
     * @param vl
     * @param closeAction
     */

    public void setup(ModelRoot mr, RendererRoot vl, Action closeAction) {

        jList1.setModel(new WorldToListModelAdapter(mr.getWorld(),
                SKEY.ENGINE_TYPES));
        jList1.setCellRenderer(new TrainCellRenderer(vl));
        okjButton.addActionListener(closeAction);
    }

    /**
     * Removes any existing ActionListener listeners from the cancel button,
     * then adds the specified one.
     */
    void setCancelButtonActionListener(ActionListener l) {
        ActionListener[] oldListeners = canceljButton.getActionListeners();
        for (ActionListener oldListener : oldListeners) {
            canceljButton.removeActionListener(oldListener);
        }
        this.canceljButton.addActionListener(l);
    }

    /**
     * Returns the number of the currently selected engine type.
     *
     * @return
     */
    public int getEngineType() {
        return jList1.getSelectedIndex();
    }

    final private class TrainCellRenderer implements ListCellRenderer {

        final RendererRoot rr;

        private final Map<String, JLabel> savesJLabels;

        public TrainCellRenderer(RendererRoot vl) {
            rr = vl;
            savesJLabels = new HashMap<>();
        }

        public Component getListCellRendererComponent(JList list, Object value,
                /* value to display */
                                                      int index, /* cell index */
                                                      boolean isSelected, /* is the cell selected */
                                                      boolean cellHasFocus) /* the list and the cell have the focus */ {

            EngineType engine = (EngineType) value;
            String text = "<html><body>" + (isSelected ? "<strong>" : "")
                    + engine.getEngineTypeName() + "<br>"
                    + engine.getMaxSpeed() + " m.p.h. "
                    + engine.getPowerAtDrawbar() + " hp $"
                    + engine.getPrice().toString()
                    + (isSelected ? "</strong>" : "") + "</body></html>";

            JLabel label = savesJLabels.get(text);
            if (label == null) {
                label = new JLabel(text);
                label.setFont(new java.awt.Font("Dialog", 0, 12));
                Image image = rr.getEngineImages(index).getSideOnImage();
                int height = image.getHeight(null);
                int width = image.getWidth(null);
                int scale = height / 50;
                ImageIcon icon = new ImageIcon(image.getScaledInstance(width
                        / scale, height / scale, Image.SCALE_FAST));
                label.setIcon(icon);
                savesJLabels.put(text, label);
            }
            return label;
        }
    }
}
