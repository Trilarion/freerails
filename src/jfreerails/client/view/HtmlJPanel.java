/*
 * HtmlJPanel.java
 *
 * Created on 19 April 2003, 16:41
 */

package jfreerails.client.view;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.reflect.Field;
import java.net.URL;
import java.util.HashMap;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import java.util.logging.Logger;

import javax.swing.Action;

import jfreerails.client.renderer.ViewLists;
import jfreerails.controller.ModelRoot;

/**
 * This JPanel displays a HTML document read from a URL.
 * 
 * @author Luke
 */
public class HtmlJPanel extends javax.swing.JPanel implements View {

	private static final long serialVersionUID = 4120848850266371126L;

	private static final Logger logger = Logger.getLogger(HtmlJPanel.class
			.getName());

	HtmlJPanel() {
		initComponents();
	}

	public HtmlJPanel(URL url) {
		initComponents();
		setHtml(loadText(url));
	}

	public HtmlJPanel(URL url, HashMap context) {
		initComponents();
		String template = loadText(url);
		String populatedTemplate = populateTokens(template, context);
		setHtml(populatedTemplate);
	}

	public HtmlJPanel(String html) {
		initComponents();
		setHtml(html);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {// GEN-BEGIN:initComponents
		java.awt.GridBagConstraints gridBagConstraints;

		jScrollPane1 = new javax.swing.JScrollPane();
		htmlJLabel = new javax.swing.JLabel();
		done = new javax.swing.JButton();

		setLayout(new java.awt.GridBagLayout());

		setMinimumSize(new java.awt.Dimension(400, 300));
		jScrollPane1
				.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		htmlJLabel.setFont(new java.awt.Font("Dialog", 0, 12));
		htmlJLabel.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
		jScrollPane1.setViewportView(htmlJLabel);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
		add(jScrollPane1, gridBagConstraints);

		done.setText("Close");
		done.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				doneActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
		add(done, gridBagConstraints);

	}// GEN-END:initComponents

	private void doneActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_doneActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_doneActionPerformed

	public void setup(ModelRoot m, ViewLists vl,
			Action closeAction) {
		this.done.setAction(closeAction);
	}

	/** Load the help text from file. */
	String loadText(final URL htmlUrl) {
		try {
			InputStream in = htmlUrl.openStream();
			BufferedReader br = new BufferedReader(new InputStreamReader(
					new DataInputStream(in)));
			String line;
			String text = "";
			while ((line = br.readLine()) != null) {
				text = text + line;
			}
			return text;
		} catch (Exception e) {
			e.printStackTrace();
			logger.warning(htmlUrl.toString());
			return "Couldn't read: " + htmlUrl;
		}
	}

	void setHtml(String s) {
		htmlJLabel.setText(s);
	}

	static String populateTokens(String template, Object context) {
		StringTokenizer tokenizer = new StringTokenizer(template, "$");
		String output = "";

		while (tokenizer.hasMoreTokens()) {
			
				output += tokenizer.nextToken();
			
			if (tokenizer.hasMoreTokens()) {
				String token = tokenizer.nextToken();
				String value;
				if (context instanceof HashMap) {
					value = (String) ((HashMap) context).get(token);
				} else {
					try {
						StringTokenizer t2 = new StringTokenizer(token, ".");
						value = null;
						Object o = context;
						while (t2.hasMoreTokens()) {
							String subToken = t2.nextToken();
							Field field = o.getClass().getField(subToken);
							o = field.get(o);
						}
						value = o.toString();
					} catch (Exception e) {
						e.printStackTrace();
						throw new NoSuchElementException(token);
					}

				}
				output += value;
			}
		}

		return output;
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton done;

	private javax.swing.JLabel htmlJLabel;

	private javax.swing.JScrollPane jScrollPane1;
	// End of variables declaration//GEN-END:variables

}
