/*
 * Copyright (C) 2003 Luke Lindsay
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/*
 * TerrainInfoJPanel.java
 *
 * Created on 04 May 2003, 17:47
 */

package jfreerails.client.view;

import java.awt.Image;
import java.awt.Point;
import javax.swing.ImageIcon;

import jfreerails.client.renderer.ViewLists;
import jfreerails.world.cargo.CargoType;
import jfreerails.world.player.Player;
import jfreerails.world.track.FreerailsTile;
import jfreerails.world.terrain.Consumption;
import jfreerails.world.terrain.Conversion;
import jfreerails.world.terrain.Production;
import jfreerails.world.terrain.TerrainType;
import jfreerails.world.top.KEY;
import jfreerails.world.top.NonNullElements;
import jfreerails.world.top.ReadOnlyWorld;
import jfreerails.world.terrain.TerrainTileViewer;
import jfreerails.world.train.WagonType;

/**
 * This JPanel shows information on a terrain type.
 *
 * @author  Luke
 */
public class TerrainInfoJPanel extends javax.swing.JPanel {
    
    private ViewLists vl;

    private ReadOnlyWorld w;

    /**
     * Map coordinate of tile we are showing
     */
    private Point location;

    private TerrainTileViewer terrainTileViewer;
    
    /** Creates new form TerrainInfoJPanel */
    public TerrainInfoJPanel() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        terrainImage = new javax.swing.JLabel();
        terrainName = new javax.swing.JLabel();
        terrainDescription = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        terrainImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jfreerails/client/graphics/terrain/City_0.png")));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 4, 4);
        add(terrainImage, gridBagConstraints);

        terrainName.setFont(new java.awt.Font("Dialog", 1, 14));
        terrainName.setText("City");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 8);
        add(terrainName, gridBagConstraints);

        terrainDescription.setFont(new java.awt.Font("Dialog", 0, 12));
        terrainDescription.setText("<html>\n<p>Right-of-Way costs X per mile. </p>\n<table width=\"75%\" >\n  <tr> \n    <td><strong>Supplies:</strong></td>\n    <td>&nbsp;</td>\n  </tr>\n  <tr> \n    <td>Mail </td>\n    <td>2</td>\n  </tr>\n  <tr> \n    <td>Passangers</td>\n    <td>2</td>\n  </tr>\n  <tr> \n    <td> <strong>Demands</strong></td>\n    <td>&nbsp;</td>\n  </tr>\n  <tr> \n    <td>Mail</td>\n    <td>&nbsp;</td>\n  </tr>\n  <tr> \n    <td>Passengers</td>\n    <td>&nbsp;</td>\n  </tr>\n  <tr> \n    <td><strong>Converts</strong></td>\n    <td>&nbsp;</td>\n  </tr>\n  <tr> \n    <td>Livestock to Food</td>\n    <td>&nbsp;</td>\n  </tr>\n  <tr>\n    <td>Steel to Goods</td>\n    <td>&nbsp;</td>\n  </tr>\n</table>\n</html>");
        terrainDescription.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 8, 4, 8);
        add(terrainDescription, gridBagConstraints);

    }//GEN-END:initComponents

    public void setup(ReadOnlyWorld w, ViewLists vl) {
        this.w = w;
        this.vl = vl;
	terrainTileViewer = new TerrainTileViewer(w);
    }    
    
    public void setTerrainLocation(Point point) {
	FreerailsTile tile = w.getTile(point.x, point.y);
	terrainTileViewer.setFreerailsTile(point.x, point.y);

	TerrainType type = (TerrainType)w.get(KEY.TERRAIN_TYPES,
		tile.getTerrainTypeNumber());
      
	String row = "";
	if (! tile.getOwner().equals(Player.AUTHORITATIVE)) {
	    NonNullElements i = new NonNullElements(KEY.PLAYERS, w,
		    Player.AUTHORITATIVE);
	    while (i.next()) {
		Player player = (Player) i.getElement();
		if (player.getPrincipal().equals(tile.getOwner())) {
		    row += "<p>Owner: " + player.getName() + "<p>";
		    break;
		}
	    }
	} else {
	    row = "<p>Purchase cost: $" +
	       	terrainTileViewer.getTerrainValue() + "</p>";
	}
	
        String tableString = "";
        int cargosProduced = type.getProduction().length;
        int cargosConsumed = type.getConsumption().length;
        int cargosConverted = type.getConversion().length;
        if((cargosProduced +  cargosConsumed+ cargosConverted) > 0){
            //if the terrain type produces, consumes, or converts anything.
            tableString = "<table width=\"75%\" >";
            if(cargosProduced != 0){
                tableString += "<tr> <td><strong>Supplies</strong></td> <td>&nbsp;</td> </tr>";
                for(int i = 0; i < cargosProduced ; i++){
                    Production p = type.getProduction()[i];
                    CargoType c = (CargoType)w.get(KEY.CARGO_TYPES, p.getCargoType());
                    String supply = String.valueOf(p.getRate());
                    tableString += "<tr> <td>"+c.getDisplayName()+" </td><td>"+supply+"</td></tr>";
                }
            }
            if(cargosConsumed != 0){
                tableString += "<tr> <td><strong>Demands</strong></td> <td>&nbsp;</td> </tr>";
                for(int i = 0; i < cargosConsumed ; i++){
                    Consumption p = type.getConsumption()[i];
                    CargoType c = (CargoType)w.get(KEY.CARGO_TYPES, p.getCargoType());
                    tableString += "<tr> <td>"+c.getDisplayName()+" </td><td>&nbsp;</td></tr>";
                }                
            }
            if(cargosConverted != 0){
                tableString += "<tr> <td><strong>Converts</strong></td> <td>&nbsp;</td> </tr>";
                for(int i = 0; i < cargosConverted ; i++){
                    Conversion p = type.getConversion()[i];
                    CargoType input = (CargoType)w.get(KEY.CARGO_TYPES, p.getInput());
                    CargoType output = (CargoType)w.get(KEY.CARGO_TYPES, p.getOutput());
                    tableString += "<tr> <td colspan=\"2\">"+input.getDisplayName()+" to "+output.getDisplayName()+"</td></tr>";
                }                    
            }
            tableString += "</table> ";
        }
        String labelString = "<html>" + row + tableString + "</html>";
        terrainDescription.setText(labelString);
        terrainName.setText(type. getDisplayName());
        
        Image tileIcon = vl.getTileViewList().getTileViewWithNumber
	    (tile.getTerrainTypeNumber()).getDefaultIcon();
        terrainImage.setIcon(new ImageIcon(tileIcon));
        
        repaint();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel terrainDescription;
    private javax.swing.JLabel terrainImage;
    private javax.swing.JLabel terrainName;
    // End of variables declaration//GEN-END:variables
    
}
