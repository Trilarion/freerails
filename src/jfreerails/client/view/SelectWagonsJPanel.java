/*
 * SelectWagonsJPanel.java
 *
 * Created on 29 December 2002, 16:54
 */

package jfreerails.client.view;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsEnvironment;
import java.awt.Image;
import java.awt.Transparency;

import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import jfreerails.client.train.SideOnTrainTrainView;
import jfreerails.world.train.TrainModel;
import jfreerails.world.train.WagonType;
/**
 *
 * @author  lindsal8
 * @version 
 */
public class SelectWagonsJPanel extends javax.swing.JPanel {
    
    private GraphicsConfiguration defaultConfiguration = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();

    Image stationView;
    
    private TrainModel train;

    /** Creates new form SelectWagonsJPanel */
    public SelectWagonsJPanel() {
        initComponents ();
         Image tempImage = (new javax.swing.ImageIcon(getClass().getResource("/jfreerails/data/station.gif"))).getImage();
        
    	stationView = defaultConfiguration.createCompatibleImage(tempImage.getWidth(null), tempImage.getHeight(null), Transparency.BITMASK);
    	
    	Graphics g = stationView.getGraphics();
    	
    	g.drawImage(tempImage, 0 ,0, null);
        
        WagonType [] wagonTypes = new WagonType[]{ new WagonType("Mail", WagonType.MAIL),
                                                   new WagonType("Passenger", WagonType.PASSENGER),
                                                   new WagonType("Fast Freight", WagonType.FAST_FREIGHT),
                                                   new WagonType("Slow Freight", WagonType.SLOW_FREIGHT),
                                                   new WagonType("Bulk Freight", WagonType.BULK_FREIGHT),                                                                                                                         
        };
        this.wagonTypesJList.setListData(wagonTypes);
        this.wagonTypesJList.setCellRenderer(new WagonCellRenderer());
      
    }
    
    public void setTrain(TrainModel t){
        train=t;
    }
    
    public TrainModel getTrain(){
        return train;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jScrollPane1 = new javax.swing.JScrollPane();
        wagonTypesJList = new javax.swing.JList();
        okjButton = new javax.swing.JButton();
        clearjButton = new javax.swing.JButton();
        setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints1;
        setPreferredSize(new java.awt.Dimension(640, 400));
        
        
        jScrollPane1.setViewportView(wagonTypesJList);
          
          
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 2;
        gridBagConstraints1.gridy = 0;
        gridBagConstraints1.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints1.weightx = 1.0;
        gridBagConstraints1.weighty = 1.0;
        add(jScrollPane1, gridBagConstraints1);
        
        
        okjButton.setText("OK");
        okjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        }
        );
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 2;
        gridBagConstraints1.gridy = 1;
        gridBagConstraints1.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        add(okjButton, gridBagConstraints1);
        
        
        clearjButton.setText("Clear");
        clearjButton.setText("jButton1");
        clearjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        }
        );
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        add(clearjButton, gridBagConstraints1);
        
    }//GEN-END:initComponents

  private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
// Add your handling code here:
  }//GEN-LAST:event_jButton1ActionPerformed

   public void paint(Graphics g){
      g.drawImage(this.stationView, 0, 0, null);
      this.paintChildren(g);
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JList wagonTypesJList;
  private javax.swing.JButton okjButton;
  private javax.swing.JButton clearjButton;
  // End of variables declaration//GEN-END:variables
  final private class WagonCellRenderer implements ListCellRenderer {
      
      
      Image tempImage;
      JLabel label;
      SideOnTrainTrainView sideOnTrainTrainView;
      
      public WagonCellRenderer(){
          sideOnTrainTrainView = new SideOnTrainTrainView(5, 0);
          tempImage = (new javax.swing.ImageIcon(getClass().getResource("/jfreerails/data/wagon_151x100.PNG"))).getImage();
          sideOnTrainTrainView.setWagonImage(0, tempImage);
          sideOnTrainTrainView.setWagonImage(1, tempImage);
          sideOnTrainTrainView.setWagonImage(2, tempImage);
          sideOnTrainTrainView.setWagonImage(3, tempImage);
          sideOnTrainTrainView.setWagonImage(4, tempImage);
          
          label = new  JLabel();//"text", new ImageIcon( tempImage ), SwingConstants.LEFT );
          
      }
      
      public Component getListCellRendererComponent( JList list, Object value, /* value to display*/ int index, /* cell index*/ boolean isSelected, /* is the cell selected*/ boolean cellHasFocus ) /* the list and the cell have the focus*/ {
          WagonType wagon = (WagonType)value;
          label.setFont(new java.awt.Font ("Dialog", 0, 12));
          String text = "<html><body>" + ( isSelected ? "<strong>" : "" ) + wagon.getName()+ ( isSelected ? "</strong>" : "" ) + "</body></html>";
          label.setText(text);
          label.setIcon(new ImageIcon(sideOnTrainTrainView.getWagonImage(index, SideOnTrainTrainView.HEIGHT_25_PIXELS)));          
          return label;
      }
  }
}
