/*
 * TrainScheduleJPanel.java
 *
 * Created on 17 April 2003, 20:25
 */

package jfreerails.client.view;
import java.awt.Component;
import java.awt.GridBagConstraints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;

import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;

import jfreerails.client.renderer.ViewLists;
import jfreerails.controller.MoveChainFork;
import jfreerails.controller.MoveReceiver;
import jfreerails.move.AddItemToListMove;
import jfreerails.move.ListMove;
import jfreerails.move.Move;
import jfreerails.move.MoveStatus;
import jfreerails.world.top.KEY;
import jfreerails.world.top.NonNullElements;
import jfreerails.world.top.World;
import jfreerails.world.top.WorldIterator;
import jfreerails.world.train.Schedule;
import jfreerails.world.train.TrainModel;
import jfreerails.world.train.TrainOrdersModel;
/**
 *
 * @author  Luke
 */
public class TrainScheduleJPanel extends javax.swing.JPanel implements
ListCellRenderer, MoveReceiver {
    
    private int currentIndex = 0;
    
    private World w;
    
    private ViewLists vl;
    
    private WorldIterator wi;
    
    private TrainOrders gotoStation;
    
    private ComponentAdapter componentListener = new ComponentAdapter() {
	public void componentHidden(ComponentEvent e) {
	    MoveChainFork.getMoveChainFork().remove(TrainScheduleJPanel.this);
	}
    
	public void componentShown(ComponentEvent e) {
	    MoveChainFork.getMoveChainFork().add(TrainScheduleJPanel.this);
	    int i = wi.getIndex();
	    wi.reset();
	    if (i != WorldIterator.BEFORE_FIRST) {
		wi.gotoIndex(i);
	    }
	    display();
	}
    };

    public MoveStatus processMove(Move move) {
	if (! (move instanceof ListMove)) {
	    return MoveStatus.MOVE_RECEIVED;
	}

	ListMove lm = (ListMove) move;
	int currentIndex = wi.getIndex();
	int changedIndex = lm.getIndex();
	KEY key = lm.getKey();
	if (key == KEY.TRAINS) {
	    wi.reset();
	    try {
		wi.gotoIndex(currentIndex);
	    } catch (java.util.NoSuchElementException e) {
		// ignore
	    }
	    if (lm instanceof AddItemToListMove &&
		    wi.getIndex() == WorldIterator.BEFORE_FIRST) {
		if (wi.next()) {
		    display();
		}
	    }
	    if (changedIndex < currentIndex) {
		previous.setEnabled(lm.getBefore() != null);
	    } else if (changedIndex > currentIndex) {
		next.setEnabled(lm.getAfter() != null);
	    } else {
		display();
	    }
	} else {
	    return MoveStatus.MOVE_RECEIVED;
	}
	return MoveStatus.MOVE_OK;
    }

    private ActionListener submitButtonCallBack = new ActionListener() {
	public void actionPerformed(ActionEvent arg0) {
	    int trainNumber = getTrainNumber();
	    if (trainNumber != WorldIterator.BEFORE_FIRST) {
		Schedule schedule = getNewSchedule();
		TrainModel train = (TrainModel) w.get(KEY.TRAINS, trainNumber);
		train.setSchedule(schedule);
	    }
	}
    };
    
    /**
     * Vector of TrainOrders
     */
    public Vector stations = new Vector();

    /**
     * implements ListCellRenderer.getListCellRendererComponent()
     */
    public Component getListCellRendererComponent(JList list, Object value, int
	    index, boolean isSelected, boolean cellHasFocus) {
	    return (Component) stations.get(index);
    }
    
    /** Creates new form TrainScheduleJPanel */
    public TrainScheduleJPanel() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        trainDetailsJPanel1 = new jfreerails.client.view.TrainDetailsJPanel();
        jPanel12 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        trainOrders1 = new TrainOrders(this);
        jPanel11 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        scrollPane = new javax.swing.JScrollPane();
        stationsPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        previous = new javax.swing.JButton();
        next = new javax.swing.JButton();
        done = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        setAlignmentX(0.0F);
        setAlignmentY(0.0F);
        setMinimumSize(new java.awt.Dimension(250, 300));
        jPanel1.setAlignmentY(0.0F);
        jPanel1.setMinimumSize(new java.awt.Dimension(240, 33));
        trainDetailsJPanel1.setAlignmentY(0.0F);
        trainDetailsJPanel1.setMinimumSize(new java.awt.Dimension(240, 23));
        jPanel1.add(trainDetailsJPanel1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.weightx = 1.0;
        add(jPanel1, gridBagConstraints);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jPanel12.setAlignmentY(0.0F);
        jPanel12.setMinimumSize(new java.awt.Dimension(206, 17));
        jLabel12.setText("Priority Orders");
        jLabel12.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel12.setAlignmentY(0.0F);
        jLabel12.setPreferredSize(new java.awt.Dimension(130, 16));
        jLabel12.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jLabel12.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        jPanel12.add(jLabel12);

        jLabel22.setText("Priority Consist:");
        jLabel22.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel22.setAlignmentY(0.0F);
        jLabel22.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jLabel22.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        jPanel12.add(jLabel22);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.weightx = 1.0;
        add(jPanel12, gridBagConstraints);

        trainOrders1.setLayout(null);

        trainOrders1.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        trainOrders1.setMinimumSize(new java.awt.Dimension(200, 37));
        trainOrders1.setPreferredSize(new java.awt.Dimension(200, 37));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.weightx = 1.0;
        add(trainOrders1, gridBagConstraints);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jPanel11.setAlignmentY(0.0F);
        jPanel11.setPreferredSize(new java.awt.Dimension(250, 27));
        jLabel11.setText("Scheduled Stops");
        jLabel11.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel11.setAlignmentY(0.0F);
        jLabel11.setPreferredSize(new java.awt.Dimension(130, 16));
        jLabel11.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jLabel11.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        jPanel11.add(jLabel11);

        jLabel21.setText("New Consist");
        jLabel21.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel21.setAlignmentY(0.0F);
        jLabel21.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jLabel21.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        jPanel11.add(jLabel21);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.weightx = 1.0;
        add(jPanel11, gridBagConstraints);

        scrollPane.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        stationsPanel.setLayout(new javax.swing.BoxLayout(stationsPanel, javax.swing.BoxLayout.Y_AXIS));

        stationsPanel.setAlignmentY(0.0F);
        stationsPanel.setMinimumSize(new java.awt.Dimension(0, 17));
        scrollPane.setViewportView(stationsPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(scrollPane, gridBagConstraints);

        jPanel2.setAlignmentY(1.0F);
        jPanel2.setMinimumSize(new java.awt.Dimension(250, 37));
        jPanel2.setPreferredSize(new java.awt.Dimension(250, 37));
        previous.setText("<- previous");
        previous.setActionCommand("previous");
        previous.setMargin(new java.awt.Insets(2, 4, 2, 4));
        previous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousActionPerformed(evt);
            }
        });

        jPanel2.add(previous);

        next.setText("next ->");
        next.setMargin(new java.awt.Insets(2, 4, 2, 4));
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });

        jPanel2.add(next);

        done.setText("Apply");
        done.setMargin(new java.awt.Insets(2, 4, 2, 4));
        done.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneActionPerformed(evt);
            }
        });

        jPanel2.add(done);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.weightx = 1.0;
        add(jPanel2, gridBagConstraints);

    }//GEN-END:initComponents
    
    private void previousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousActionPerformed
        // Add your handling code here:
        if(wi.previous()){
            display();
        }else{
            throw new IllegalStateException();
        }
        
    }//GEN-LAST:event_previousActionPerformed
    
    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
        // Add your handling code here:
        if(wi.next() ){
            display();
        }else{
            throw new IllegalStateException();
        }
    }//GEN-LAST:event_nextActionPerformed
    
    private void doneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_doneActionPerformed
    
    private void trainOrdersKeyPressed(java.awt.event.KeyEvent evt) {
        if(evt.getKeyCode()==KeyEvent.VK_G){
		setGotoStation((TrainOrders) stations.get(currentIndex));
        }
        
        if(evt.getKeyCode()==KeyEvent.VK_UP){
            currentIndex--;
            if (currentIndex < 0) {
                currentIndex = stations.size() - 1;
        }
        }
        
        if(evt.getKeyCode() == KeyEvent.VK_DOWN) {
            currentIndex++;
            if (currentIndex >= stations.size()) {
                currentIndex = 0;
            }
        }
    }
    
    private void setGotoStation(TrainOrders orders){
        
        if(null!=gotoStation){
            gotoStation.setGotoStation(false);
        }
        gotoStation = orders;
	if (orders != null) {
        orders.setGotoStation(true);
        orders.repaint();
        }
        }
    
    private void trainOrders1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_trainOrders1KeyPressed
        // Add your handling code here:
        if(evt.getKeyCode()==KeyEvent.VK_G){
            setGotoStation((TrainOrders) trainOrders1);
        }
    }//GEN-LAST:event_trainOrders1KeyPressed
    
    public void setup(World w, ViewLists vl) {
        this.w = w;
	this.vl = vl;
	addComponentListener(componentListener);

	addKeyListener(new java.awt.event.KeyAdapter() {
		public void keyPressed(java.awt.event.KeyEvent evt) {
		trainOrdersKeyPressed(evt);
		}
		});

        this.done.addActionListener(submitButtonCallBack);
        this.trainDetailsJPanel1.setup(w, vl, null);
    }
    
    public void addStation(int index, TrainOrders trainOrders) {
	stations.addElement(trainOrders);
	stationsPanel.add(trainOrders, index);
	if (index + 1 < stations.size()) {
	    for (int i = index + 1; i < stations.size(); i++) {
		((TrainOrders) stations.get(i)).display(i + 1);
	    }
            }
        }
        
    public void removeStation(TrainOrders trainOrders) {
	int i = stations.indexOf(trainOrders);
	stationsPanel.remove(trainOrders);
	stations.removeElement(trainOrders);
	if (gotoStation == trainOrders) {
	    if (stations.isEmpty()) {
		gotoStation = null;
	    } else {
		gotoStation = (TrainOrders) stations.get(i);
	    }
	}
	while (! stations.isEmpty() && i < stations.size()) {
	    ((TrainOrders) stations.get(i)).display(i + 1);
	    i++;
	}
    }
        
    private void display(){
        if(wi.getRowNumber()>0){
            this.previous.setEnabled(true);
        }else{
            this.previous.setEnabled(false);
        }
        
        if(wi.getRowNumber()<(wi.size()-1)){
            this.next.setEnabled(true);
        }else{
            this.next.setEnabled(false);
        }
	if (wi.getRowNumber() != WorldIterator.BEFORE_FIRST) {
	    TrainModel train = (TrainModel)wi.getElement();
	    Schedule schedule = train.getSchedule();
	    TrainOrdersModel orders = schedule.getOrder(0);
	    /* substitute the priority orders for blank panel if not present */
	    GridBagConstraints gridBagConstraints = new GridBagConstraints();
	    gridBagConstraints.gridx = 0;
	    gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
	    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
	    if (orders != null) {
		remove(trainOrders1);
		trainOrders1 = new TrainOrders(this, orders);
		((TrainOrders) trainOrders1).setup(w, vl);
		add(trainOrders1, gridBagConstraints);
	    } else { 
		remove(trainOrders1);
		trainOrders1 = new TrainOrders(this);
		add(trainOrders1, gridBagConstraints);
	    }
            trainOrders1.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
            ((TrainOrders) trainOrders1).setup(w, vl);
            trainOrders1.setMinimumSize(new java.awt.Dimension(200, 37));
            trainOrders1.setPreferredSize(new java.awt.Dimension(200, 37));
            ((TrainOrders) trainOrders1).display(0);
            int trainNumber = wi.getIndex();
	    TrainOrders trainOrders;

	    while (! stations.isEmpty() &&
		    null != (trainOrders = (TrainOrders) stations.firstElement())) {
		/* remove surplus orders */
		removeStation(trainOrders);
	    }
	    for (int i = 0; i < schedule.getNumOrders() - 1; i++) {
		/* create all necessary components */
		orders = schedule.getOrder(i + 1);
		trainOrders = new TrainOrders(this, orders);
		trainOrders.setup(w, vl);
		addStation(stations.size(), trainOrders);
	    }

	    for (int i = 0; i < stations.size(); i++) {
		((TrainOrders) stations.get(i)).display(i + 1);
		// stations.fireContentsChanged(stations, i, i);
	    }

	    if (schedule.getOrderToGoto() == 0 && 
		    schedule.getOrder(0) == null) {
		this.setGotoStation((TrainOrders) trainOrders1);
	    } else if (! stations.isEmpty() && schedule.getOrderToGoto() != 0) {
		setGotoStation((TrainOrders)
			stations.get(schedule.getOrderToGoto() - 1));
	    } else {
		// ??? - No stations or no orders
	    }

       // this.heading.setText("TRAIN ORDERS #"+(wi.getRowNumber()+1));
        this.trainDetailsJPanel1.displayTrain(wi.getIndex());
	} else {
	    remove(trainOrders1);
	    trainOrders1 = new JPanel();
	    add(trainOrders1, 1);
	}
        
        revalidate();
        this.repaint();
    }
    
    public void displayFirst(){
        wi = new NonNullElements(KEY.TRAINS, w);
	wi.next();
            display();
        }              
    
    /**
     * Generates the new schedule from the currently edited station list
     */
    public Schedule getNewSchedule(){
    TrainOrdersModel o;
        Schedule newSchedule = new Schedule();
	if (trainOrders1 instanceof TrainOrders) {
	    o = ((TrainOrders) trainOrders1).getNewOrders();
	} else {
	    o = null;
	}
	newSchedule.setOrder(0, o);
	for (int i = 0; i < stations.size(); i++) {
	o = ((TrainOrders) stations.get(i)).getNewOrders();
	    newSchedule.setOrder(i + 1, o);
	}
	if (gotoStation != null) {
	    newSchedule.setOrderToGoto(gotoStation.orderNo);
	}
        return newSchedule;
    }
    
    public int getTrainNumber(){
        return this.wi.getIndex();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton done;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton next;
    private javax.swing.JButton previous;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JPanel stationsPanel;
    private jfreerails.client.view.TrainDetailsJPanel trainDetailsJPanel1;
    private javax.swing.JPanel trainOrders1;
    // End of variables declaration//GEN-END:variables
    
}

