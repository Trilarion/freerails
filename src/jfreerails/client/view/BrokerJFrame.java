/*
 * BrokerJFrame.java
 *
 * Created on January 28, 2005, 2:27 PM
 */

package jfreerails.client.view;

import java.awt.Component;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.reflect.Field;
import java.net.URL;
import java.util.HashMap;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import java.util.logging.Logger;
import javax.swing.JMenuItem;
import jfreerails.client.common.ModelRoot;
import jfreerails.client.renderer.ViewLists;

import jfreerails.world.player.Player;



/**
 *
 * @author  smackay
 */
public class BrokerJFrame extends javax.swing.JInternalFrame implements View {
    
     private static final long serialVersionUID = 4121409622587815475L;
	private static final Logger logger = Logger.getLogger(BrokerJFrame.class
            .getName());

    /** Creates new form BrokerJFrame */
    BrokerJFrame(){
        initComponents();
        addJMenuItems();
    }
    
    
    public BrokerJFrame(URL url) {
        initComponents();
        addJMenuItems();
        setHtml(loadText(url));
    }
    
    public BrokerJFrame(URL url, HashMap context) {
        initComponents();
        addJMenuItems();
        String template = loadText(url);
        String populatedTemplate = populateTokens(template, context);
        setHtml(populatedTemplate);
    }
    
    public BrokerJFrame(String html) {
        initComponents();
        addJMenuItems();
        setHtml(html);
    }
    
    public void addJMenuItems(){
        sellTreasuryStockJMenuItem = new JMenuItem();
        buyTreasuryStockJMenuItem = new JMenuItem();
        buyPlayerStockJMenuItems = new HashMap<String, JMenuItem>();
        sellPlayerStockJMenuItems = new HashMap<String, JMenuItem>();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        htmlJLabel = new javax.swing.JLabel();
        done = new javax.swing.JButton();
        BrokerMenu = new javax.swing.JMenuBar();
        Bonds = new javax.swing.JMenu();
        issueBond = new javax.swing.JMenuItem();
        repayBond = new javax.swing.JMenuItem();
        Stocks = new javax.swing.JMenu();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        htmlJLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        htmlJLabel.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        jScrollPane1.setViewportView(htmlJLabel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 357;
        gridBagConstraints.ipady = 207;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        done.setText("Close");
        done.setVerifyInputWhenFocusTarget(false);
        done.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 170, 4, 0);
        getContentPane().add(done, gridBagConstraints);

        Bonds.setText("Bonds");
        issueBond.setText("Issue Bond");
        Bonds.add(issueBond);

        repayBond.setText("Repay Bond");
        Bonds.add(repayBond);

        BrokerMenu.add(Bonds);

        Stocks.setText("Stocks");
        BrokerMenu.add(Stocks);

        setJMenuBar(BrokerMenu);

        pack();
    }//GEN-END:initComponents

    private void doneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneActionPerformed
        this.dispose();
    }//GEN-LAST:event_doneActionPerformed
    
    public void setup(ModelRoot m,  ViewLists vl, ActionListener submitButtonCallBack) {
        this.done.addActionListener(submitButtonCallBack);
    }

    void setIssueBondActionListener(ActionListener l){
        ActionListener[] oldListeners = issueBond.getActionListeners();
        for(int i = 0; i < oldListeners.length; i++){
            issueBond.removeActionListener(oldListeners[i]);
        }
        this.issueBond.addActionListener(l);
    }
    
    void setBuytreasuryStockActionListener(ActionListener l){
        ActionListener[] oldListeners = buyTreasuryStockJMenuItem.getActionListeners();
        for(int i = 0; i < oldListeners.length; i++){
            buyTreasuryStockJMenuItem.removeActionListener(oldListeners[i]);
        }
        buyTreasuryStockJMenuItem.addActionListener(l);
    }
    
    void setSellTreasuryStockActionlistener(ActionListener l){
        ActionListener[] oldListeners = sellTreasuryStockJMenuItem.getActionListeners();
        for(int i = 0; i < oldListeners.length; i++){
            sellTreasuryStockJMenuItem.removeActionListener(oldListeners[i]);
        }
        sellTreasuryStockJMenuItem.addActionListener(l);
    }
    
    void setBuyPlayerStockActionlistener(ActionListener l,Player p){
        JMenuItem playersJMenuItem = buyPlayerStockJMenuItems.get(p.getName());
        if(playersJMenuItem != null) {
            ActionListener[] oldListeners = playersJMenuItem.getActionListeners();
            for(int i = 0; i < oldListeners.length; i++){
                playersJMenuItem.removeActionListener(oldListeners[i]);
            }
            playersJMenuItem.addActionListener(l);
        }
    }
    
    void setSellPlayerStockActionlistener(ActionListener l,Player p){
        JMenuItem playersJMenuItem = sellPlayerStockJMenuItems.get(p.getName());
        if(playersJMenuItem != null) {
            ActionListener[] oldListeners = playersJMenuItem.getActionListeners();
            for(int i = 0; i < oldListeners.length; i++){
                playersJMenuItem.removeActionListener(oldListeners[i]);
            }
            playersJMenuItem.addActionListener(l);
        }
    }
    
    void setRepayBondActionListener(ActionListener l){
        ActionListener[] oldListeners = repayBond.getActionListeners();
        for(int i = 0; i < oldListeners.length; i++){
            repayBond.removeActionListener(oldListeners[i]);
        }
        this.repayBond.addActionListener(l);
    }
    
    public void enableBuyPlayerStock(Player p){
        if(!(buyPlayerStockJMenuItems.containsKey(p.getName()))){
            JMenuItem buyPlayerStock = new javax.swing.JMenuItem();
            buyPlayerStockJMenuItems.put(p.getName(), buyPlayerStock);
            buyPlayerStock.setText("Buy 10,000 of " + p.getName());
            Stocks.add(buyPlayerStock);
        }
        else if(buyPlayerStockJMenuItems.containsKey(p.getName())){
            JMenuItem buyPlayerStock = buyPlayerStockJMenuItems.get(p.getName());
            Stocks.add(buyPlayerStock);
         }
    }
    
    public void disableBuyPlayerStock(Player p){
        if(buyPlayerStockJMenuItems.containsKey(p.getName())){
            Stocks.remove((Component)buyPlayerStockJMenuItems.get(p.getName()));
        }
    }
    public void enableSellPlayerStock(Player p){
        if(!(sellPlayerStockJMenuItems.containsKey(p.getName()))){
            JMenuItem buyPlayerStock = new javax.swing.JMenuItem();
            sellPlayerStockJMenuItems.put(p.getName(), buyPlayerStock);
            buyPlayerStock.setText("Sell 10,000 of " + p.getName());
            Stocks.add(buyPlayerStock);
        }
        else if(sellPlayerStockJMenuItems.containsKey(p.getName())){
            JMenuItem buyPlayerStock = sellPlayerStockJMenuItems.get(p.getName());
            Stocks.add(buyPlayerStock);
        }
    }
    public void visibleSellPlayerStock(Player P){

    }
    
    public void disableSellPlayerStock(Player p){
        if(sellPlayerStockJMenuItems.containsKey(p.getName())){
            Stocks.remove((Component)sellPlayerStockJMenuItems.get(p.getName()));
        }
    }
    
    public void enableSellTreasuryStockJMenuItem(){
        sellTreasuryStockJMenuItem.setText("Sell 10,000 of Treasury Stock");
        Stocks.add(sellTreasuryStockJMenuItem);
    }
    
    public void enableBuyTreasuryStockJMenuItem(){
        buyTreasuryStockJMenuItem.setText("Buy 10,000 of Treasury Stock");
        Stocks.add(buyTreasuryStockJMenuItem);
    }
    
    public void disableSellTreasuryStockJMenuItem(){
        Stocks.remove(sellTreasuryStockJMenuItem);
    }
    
    public void disableBuyTreasuryStockJMenuitem() {
        Stocks.remove(buyTreasuryStockJMenuItem);
    }
    
    /** Load the help text from file.  */
    String loadText(final URL htmlUrl) {
        try {
            InputStream in = htmlUrl.openStream();
            BufferedReader br =
                    new BufferedReader(
                    new InputStreamReader(new DataInputStream(in)));
            String line;
            String text = "";
            while ((line = br.readLine()) != null) {
                text = text + line;
            }
            return text;
        } catch (Exception e) {
            e.printStackTrace();
            logger.warning(htmlUrl.toString());
            return "Couldn't read: "+htmlUrl;
        }
    }
    
    void setHtml(String s){
        htmlJLabel.setText(s);
    }
    
    public String populateTokens(String template, Object context){
        StringTokenizer tokenizer = new StringTokenizer(template, "$");
        String output = "";
        
        while(tokenizer.hasMoreTokens()){
            output += tokenizer.nextToken();
            if(tokenizer.hasMoreTokens()){
                String token = tokenizer.nextToken();
                String value;
                if(context instanceof HashMap){
                    value = (String)((HashMap)context).get(token);
                }else{
                    try {
                        Field field = context.getClass().getField(token);
                        value = field.get(context).toString();
                    } catch (Exception e) {
                        e.printStackTrace();
                        throw new NoSuchElementException(token);
                    }
                }
                output+=value;
            }
        }
        
        return output;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Bonds;
    private javax.swing.JMenuBar BrokerMenu;
    private javax.swing.JMenu Stocks;
    private javax.swing.JButton done;
    private javax.swing.JLabel htmlJLabel;
    private javax.swing.JMenuItem issueBond;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem repayBond;
    // End of variables declaration//GEN-END:variables
    private javax.swing.JMenuItem sellTreasuryStockJMenuItem;
    private javax.swing.JMenuItem buyTreasuryStockJMenuItem;
    private HashMap<String, JMenuItem> buyPlayerStockJMenuItems;
    private HashMap<String, JMenuItem> sellPlayerStockJMenuItems;
}
