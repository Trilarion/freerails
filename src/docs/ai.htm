<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
	<META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=windows-1252">
	<TITLE>AI</TITLE>
	<META NAME="GENERATOR" CONTENT="OpenOffice.org 1.1.3  (Win32)">
	<META NAME="CREATED" CONTENT="20050211;6324753">
	<META NAME="CHANGED" CONTENT="20050211;6325693">
	<STYLE>
	<!--
		TD P { font-family: "Arial", "Helvetica", sans-serif }
		P { font-family: "Arial", "Helvetica", sans-serif }
	-->
	</STYLE>
</HEAD>
<BODY LANG="en-US" DIR="LTR">
<H2>AI</H2>
<P>Last modifled @lastModified@ </P>
<P>Disclaimer - the notes below are very incomplete. It might make
sense to do something simpler for the first version of the AI.</P>
<H4>Deciding which cities should be connected to each other</H4>
<P>Create a table of the distances between cities. E.g.</P>
<TABLE WIDTH=405 CELLPADDING=2 CELLSPACING=2>
	<TR>
		<TD>
			<P>&nbsp;</P>
		</TD>
		<TD>
			<P>City A</P>
		</TD>
		<TD>
			<P>City B</P>
		</TD>
		<TD>
			<P>City C</P>
		</TD>
		<TD>
			<P>City D</P>
		</TD>
	</TR>
	<TR>
		<TD>
			<P>City A</P>
		</TD>
		<TD>
			<P>x</P>
		</TD>
		<TD>
			<P>20km</P>
		</TD>
		<TD>
			<P>30km</P>
		</TD>
		<TD>
			<P>25km</P>
		</TD>
	</TR>
	<TR>
		<TD>
			<P>City B</P>
		</TD>
		<TD>
			<P>20km</P>
		</TD>
		<TD>
			<P>x</P>
		</TD>
		<TD>
			<P>35km</P>
		</TD>
		<TD>
			<P>15km</P>
		</TD>
	</TR>
	<TR>
		<TD>
			<P>City C</P>
		</TD>
		<TD>
			<P>30km</P>
		</TD>
		<TD>
			<P>35km</P>
		</TD>
		<TD>
			<P>x</P>
		</TD>
		<TD>
			<P>40km</P>
		</TD>
	</TR>
	<TR>
		<TD>
			<P>City D</P>
		</TD>
		<TD>
			<P>25km</P>
		</TD>
		<TD>
			<P>15km</P>
		</TD>
		<TD>
			<P>40km</P>
		</TD>
		<TD>
			<P>x</P>
		</TD>
	</TR>
</TABLE>
<P>For every pair of cities i, j {</P>
<P STYLE="margin-left: 1cm; margin-right: 1cm">For every city k where
i != k and j !=k{</P>
<P STYLE="margin-left: 2cm; margin-right: 2cm"><FONT FACE="Arial, Helvetica, sans-serif">Let
A = the distance between i and j.</FONT></P>
<P STYLE="margin-left: 2cm; margin-right: 2cm"><FONT FACE="Arial, Helvetica, sans-serif">Let
B = the distance between i and k.</FONT></P>
<P STYLE="margin-left: 2cm; margin-right: 2cm"><FONT FACE="Arial, Helvetica, sans-serif">Let
C = the distance between k and j.</FONT></P>
<P STYLE="margin-left: 2cm; margin-right: 2cm"><FONT FACE="Arial, Helvetica, sans-serif">If
(A &lt; B and A &lt; C) then remove the value at i, j from the table.</FONT></P>
<P STYLE="margin-left: 1cm; margin-right: 1cm">}</P>
<P>}</P>
<P>We can now construct a graph from the values remaining in the
table. It will have the following properties. First, every city is
connected to its nearest neighbour. Second, we can get from any city
to any other city. Third, <EM>not too much</EM> track will be wasted.</P>
<H4>Deciding the order in which to connect cities 
</H4>
<P>Lets assume the profitability of a line between 2 cities, A and B
is given by the following condition.</P>
<P>Profitability = (Cargo supplied by A and demanded by B + Cargo
supplied by B and demanded by A) / Distance between A and B.</P>
<P>Implementation Note: a natural way to analyze supply and demand
and cargo conversions would be using matrix algebra. E.g. supply and
demand at a station could be represented by n * 1 matrices and cargo
converted by an n * n matrix (where n is the number of cargo types).
There is a public domain java matrix package available <A HREF="http://math.nist.gov/javanumerics/jama/">here</A>.</P>
<P>The simplest strategy for building track would be starting with
most profitable connection. Note, that on the first move, we can pick
any connection, but on subsequent moves, we are restricted to
connections involving at least one city we have already connected to.
Call this restricted set of connections S. A reasonable strategy for
subsequent moves would be repeatedly picking the most profitable
connection from S.</P>
<P>A more sophisticated strategy would take into account the
restriction that new track must connect to existing track when
picking the first pair of cities to connect. We could approach the
problem as follows. Assume we build one connection per year and the
game continues until we have built all possible connections. Suppose
our payoff for building a connection is the profitability of the
connection times the number of years remaining. For simplicity,
assume that once we have built the first connection, we revert to
just picking the most profitable connection from S as before. Now, we
can solve the problem of which connection to start with by comparing
the payoff over the complete game for each of the possible starts. 
</P>
<P>Obviously, to formally solve the problem above, we would need to
consider strategies other than picking the most profitable connection
from S for moves after the first one. However, unless the number of
cities is relatively small this would likely take a long time to
solve. What is more, we have not even considered what other players
may be doing, so even if we could formally solve the problem above,
we would still have a lot of work to do.</P>
<P>&nbsp;</P>
</BODY>
</HTML>