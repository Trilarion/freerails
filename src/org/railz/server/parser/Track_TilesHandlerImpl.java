/*
 * Copyright (C) Luke Lindsay
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/*
 * File:           Track_TilesHandlerImpl.java
 * Date:           21 January 2002  18:00
 *
 * @author  lindsal
 * @version generated by FFJ XML module
 */
package org.railz.server.parser;

import java.util.ArrayList;
import java.util.Iterator;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;

import org.railz.world.common.*;
import org.railz.world.top.*;
import org.railz.world.terrain.*;
import org.railz.world.track.TrackRule;
import org.railz.world.player.Player;


public class Track_TilesHandlerImpl implements Track_TilesHandler {
	private World world;
    int maxConsequ;
    private long maintenance;
    private long price;
    private boolean isTunnel;
    private String typeName;
    private boolean doubleTrack;
    public static final boolean DEBUG = false;

    /**
     * ArrayList of Byte
     */
    protected ArrayList legalTemplates;

    /**
     * HashSet of Integer
     */
    protected java.util.HashSet terrainTypes;

    //  protected LegalTrackPlacement.PlacementRule placementRule;
    public void start_CanOnlyBuildOnTheseTerrainTypes(final Attributes meta)
        throws SAXException {
        terrainTypes = new java.util.HashSet();
    }

    public void end_CanOnlyBuildOnTheseTerrainTypes() throws SAXException {
	// do nothing
    }

    public void start_ListOfTrackPieceTemplates(final Attributes meta)
        throws SAXException {
        legalTemplates = new ArrayList();
    }

    public void end_ListOfTrackPieceTemplates() throws SAXException {
	// do nothing
    }

    public void start_TrackType(final Attributes meta)
        throws SAXException {
	isTunnel = false;
	doubleTrack =
	    Boolean.valueOf(meta.getValue("doubleTrack")) .booleanValue();
        typeName = meta.getValue("type");
        maxConsequ = (int)Integer.parseInt(meta.getValue(
                    "maxConsecutivePieces"));

        String priceString = meta.getValue("price");
        price = Integer.parseInt(priceString);

        String maintenanceString = meta.getValue("maintenance");
        maintenance = Integer.parseInt(maintenanceString);
	if (meta.getValue("tunnel").equals("true"))
	    isTunnel = true;
    }

    public void end_TrackType() throws SAXException {
	boolean[] buildPermissions = new boolean[TerrainType.MAX_CATEGORIES +
	    1];
	Iterator it = terrainTypes.iterator();
	while (it.hasNext()) {
	    Integer type = (Integer) it.next();
	    buildPermissions[type.intValue()] = true;
	}
	byte[] legalConfigs = new byte[legalTemplates.size()];
	for (int i = 0; i < legalConfigs.length; i++)
	    legalConfigs[i] = ((Byte) legalTemplates.get(i)).byteValue();

	TrackRule tr = new TrackRule(price, typeName, doubleTrack,
		maintenance, legalConfigs, maxConsequ, buildPermissions,
		isTunnel);
	world.add(KEY.TRACK_RULES, tr, Player.AUTHORITATIVE);
    }

    public void handle_TerrainType(final Attributes meta)
        throws SAXException {
	    String name = meta.getValue("name");
	    int tileCategory;
	    if ("River".equals(name))
		tileCategory = TerrainType.CATEGORY_RIVER;
	    else if ("Ocean".equals(name))
		tileCategory = TerrainType.CATEGORY_OCEAN;
	    else if ("Hill".equals(name))
		tileCategory = TerrainType.CATEGORY_HILL;
	    else if ("Country".equals(name))
		tileCategory = TerrainType.CATEGORY_COUNTRY;
	    else
		throw new SAXException("Unknown terrain type");
	    NonNullElements i = new NonNullElements(KEY.TERRAIN_TYPES, world,
		    Player.AUTHORITATIVE);
	    terrainTypes.add(new Integer(tileCategory));
    }

    public void start_Tiles(final Attributes meta) throws SAXException {
    }

    public void end_Tiles() throws SAXException {
    }

    public void start_TrackPieceTemplate(final Attributes meta)
        throws SAXException {
        legalTemplates.add(new Byte(CompassPoints.nineBitToEightBit
		    (meta.getValue("trackTemplate"))));
    }

    public void end_TrackPieceTemplate() throws SAXException {
        //do nothing.
    }

    public Track_TilesHandlerImpl(java.net.URL trackXmlUrl, World w) {
	world = w;
        try {
            Track_TilesParser.parse(trackXmlUrl, this,
                new Track_TilesParsletImpl());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
