/*
 * Copyright (C) 2003 Luke Lindsay
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/*
 * Created on 10-Aug-2003
 *
 */
package org.railz.controller;

import java.util.ArrayList;
import org.railz.move.AddTransactionMove;
import org.railz.move.ChangeTrackPieceMove;
import org.railz.move.CompositeMove;
import org.railz.move.Move;
import org.railz.world.accounts.AddItemTransaction;
import org.railz.world.accounts.Transaction;
import org.railz.world.common.GameTime;
import org.railz.world.top.KEY;
import org.railz.world.top.ITEM;
import org.railz.world.top.ReadOnlyWorld;
import org.railz.world.track.*;
import org.railz.world.player.FreerailsPrincipal;


/**
 * This class calculates the cost of a series of track moves.  The
 * motivation for separating this code from the code that generates
 * track moves is that the transactions will be generated by the server
 * whereas the track moves will be generated by a client.
 *
 * @author Luke Lindsay
 *
 */
public class TrackMoveTransactionsGenerator {
    /** Number of each of the track types added. */
    private int[] trackAdded;

    /** Number of each of the track types removed. */
    private int[] trackRemoved;

    /* Note, trackAdded and trackRemoved cannot be combined, since
     * it may cost more to added a unit of track than is refunded when
     * you removed it.
     */
    private ArrayList transactions = new ArrayList();
    private ReadOnlyWorld w;
    private FreerailsPrincipal principal;

    /**
     * @param p the Principal on behalf of which this object generates
     * transactions for
     */
    public TrackMoveTransactionsGenerator(ReadOnlyWorld world,
        FreerailsPrincipal p) {
        w = world;
	principal = p;
    }

    public Move addTransactions(Move move) {
        int numberOfTrackTypes = w.size(KEY.TRACK_RULES);
        trackAdded = new int[numberOfTrackTypes];
        trackRemoved = new int[numberOfTrackTypes];

        unpackMove(move);
        generateTransactions();

        int numberOfMoves = 1 + transactions.size();
        Move[] moves = new Move[numberOfMoves];
        moves[0] = move;

        for (int i = 0; i < transactions.size(); i++) {
            Transaction t = (Transaction)transactions.get(i);
            moves[i + 1] = new AddTransactionMove(0, t, true, principal);
        }

        return new CompositeMove(moves);
    }

    private void unpackMove(Move move) {
        if (move instanceof ChangeTrackPieceMove) {
            ChangeTrackPieceMove tm = (ChangeTrackPieceMove)move;
            processMove(tm);
        } else if (move instanceof CompositeMove) {
            CompositeMove cm = (CompositeMove)move;
            cm.getMoves();

            Move[] moves = cm.getMoves();

            for (int i = 0; i < moves.length; i++) {
                unpackMove(moves[i]);
            }
        }
    }

    private void processMove(ChangeTrackPieceMove move) {
	TrackTile trAfter = move.getNewTrackPiece();
	TrackTile trBefore = move.getOldTrackPiece();
	 int after = -1;
	 int before = -1;
        if (trAfter != null) {
	    after = trAfter.getTrackRule();
        }

        if (trBefore != null) {
	    before = trBefore.getTrackRule();
        }
	if (after == before)
	    return;
	if (after >= 0)
	    trackAdded[after]++;
	if (before >= 0)
	    trackRemoved[before]++;
    }

    /**
     * Charge or credit player according to amount of track added/removed.
     * TODO Charge diagonals at sqrt(2) of straight track
     */
    private void generateTransactions() {
        transactions.clear();

        //For each track type, generate a transaction if any pieces of the type have been added or removed.
        for (int i = 0; i < trackAdded.length; i++) {
            int numberAdded = trackAdded[i];

            if (0 != numberAdded) {
                TrackRule rule = (TrackRule)w.get(KEY.TRACK_RULES, i);
                long m = rule.getPrice();
                long total = -m * numberAdded;
		GameTime now = (GameTime) w.get(ITEM.TIME, principal);
		Transaction t = new AddItemTransaction(now,
			AddItemTransaction.TRACK, i, numberAdded, total);
                transactions.add(t);
            }

            int numberRemoved = trackRemoved[i];

            if (0 != numberRemoved) {
                TrackRule rule = (TrackRule)w.get(KEY.TRACK_RULES, i);
                long m = rule.getPrice();

                long total = m * numberRemoved / 2;
		GameTime now = (GameTime) w.get(ITEM.TIME, principal);

		Transaction t = new AddItemTransaction(now,
			AddItemTransaction.TRACK,
                        i, -numberRemoved, total);
                transactions.add(t);
            }
        }
    }
}
