/*
 * Copyright (C) 2003 Robert Tuck
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/*
 * BuildJPane.java
 *
 * Created on 19 August 2003, 19:52
 */

package org.railz.client.view;

import java.awt.GridBagConstraints;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JPanel;

import org.railz.client.model.ModelRoot;
import org.railz.client.model.TrackBuildModel;
import org.railz.client.renderer.ViewLists;

/**
 * Displays the "Build" Tab.
 * @author  bob
 */
public class BuildJPane extends javax.swing.JPanel {
    
    private ViewLists viewLists;
    private JPanel currentPanel;
    private ModelRoot modelRoot;

    public void validate () {
	super.validate();
	
    }

    /** Creates new form BuildJPane */
    public BuildJPane() {
        initComponents();
	setupComponents();
    }
    
    public void setup(ViewLists vl, ModelRoot modelRoot) {
	this.modelRoot = modelRoot;
	viewLists = vl;
	setBuildPanel("Track");
    }
    
    private void setupComponents() {
	/*
	 * setup the "Build" combobox
	 */
	buildCB.addItem("Track");
	buildCB.addItem("Station");
	buildCB.addActionListener(comboBoxActionListener);
    }

    private ActionListener comboBoxActionListener = new ActionListener() {
	public void actionPerformed(ActionEvent e) {
	    String s = (String) buildCB.getSelectedItem();
	    setBuildPanel(s);
	}
    };
    
    private void setBuildPanel(String s) {
	/* TODO */
	if (currentPanel != null) {
	    remove(currentPanel);
	}
	if (s.equals("Track")) {
		currentPanel = new TrackBuildJPanel();
		GridBagConstraints gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.fill = GridBagConstraints.BOTH;
		gbc.weightx = gbc.weighty = 1.0;

		add(currentPanel, gbc);
		((TrackBuildJPanel) currentPanel).setup(viewLists, modelRoot);
		revalidate();
	} else if (s.equals("Station")) {
	    currentPanel = new StationBuildJPanel();
	    GridBagConstraints gbc = new GridBagConstraints();
	    gbc.gridx = 0;
	    gbc.fill = GridBagConstraints.BOTH;
	    gbc.weightx = gbc.weighty = 1.0;

	    add(currentPanel, gbc);
	    ((StationBuildJPanel) currentPanel).setup(viewLists, modelRoot);
	    revalidate();
	}
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        buildCB = new javax.swing.JComboBox();

        setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Build:");
        jPanel1.add(jLabel1);

        jPanel1.add(buildCB);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        add(jPanel1, gridBagConstraints);

    }//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox buildCB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
    
}
