/*
 * Copyright (C) 2002 Luke Lindsay
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/*
 * SelectEngineJPanel.java
 *
 * Created on 25 December 2002, 23:00
 */

package org.railz.client.view;

import java.awt.Component;
import java.awt.Image;
import java.awt.event.ActionListener;
import java.text.*;

import java.util.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.table.*;

import org.railz.client.model.ModelRoot;
import org.railz.client.renderer.ViewLists;
import org.railz.util.*;
import org.railz.world.common.*;
import org.railz.world.player.*;
import org.railz.world.top.*;
import org.railz.world.train.*;
import org.railz.world.track.*;

/**
 * This JPanel lets the user select an engine from a list.
 *
 * @author  lindsal8
 *
 */
public class SelectEngineJPanel extends javax.swing.JPanel {
    private ModelRoot modelRoot;

    private DefaultTableColumnModel tableColumnModel;

    private static final DecimalFormat decimalFormat = new DecimalFormat
	("###");
    
    private class SpeedTableModel extends AbstractTableModel {
	
	private EngineType engineType;
	
	/** gradient in % */
	public float[] gradient = new float[] {0, 1, 2, 3, 4, 5};
	/** mass in tonnes */
	public int[] mass = new int[] {50, 100, 100, 150, 200};

	public int getRowCount() {
	    return mass.length;
	}

	public int getColumnCount() {
	    return gradient.length + 1;
	}

	public Object getValueAt(int row, int column) {
	    if (column == 0)
		return new Float(mass[row]);
	    
	    if (engineType == null)
		return new Float(0);

	    float maxSpeed = engineType.getMaxSpeed(
		    (float) gradient[column - 1], mass[row]);
	    // convert from deltas per tick to miles per hour
	    maxSpeed *= ((float) GameTime.TICKS_PER_BIG_TICK)
		/ (TrackTile.DELTAS_PER_TILE *
			EngineType.TILE_HOURS_PER_MILE_BIGTICKS);
	    return decimalFormat.format((double) maxSpeed);
	}

	public SpeedTableModel(EngineType et) {
	    engineType = et;
	}

	public String getColumnName(int column) {
	    if (column == 0)
		return "Mass \\ gradient";
	    return  String.valueOf(gradient[column - 1]);
	}
    }

    private static class EngineTypeListModel implements ListModel {
	private ArrayList engineTypes = new ArrayList();

	public EngineTypeListModel (ReadOnlyWorld w) {
	    NonNullElements i = new NonNullElements
		(KEY.ENGINE_TYPES, w, Player.AUTHORITATIVE);
	    while (i.next()) {
		EngineType et = (EngineType) i.getElement();
		if (et.isAvailable())
		    engineTypes.add(et);
	    }
	}

	public void addListDataListener(ListDataListener l) {
	    // do nothing
	}

	public void removeListDataListener(ListDataListener l) {
	    // do nothing
	}
	
	public Object getElementAt(int index) {
	    if (index >= 0 && index < engineTypes.size())
		return engineTypes.get(index);

	    return null;
	}

	public int getSize() {
	    return engineTypes.size();
	}
    }
    
    private void setEngineType(EngineType et) {
	jTable1.setModel(new SpeedTableModel(et));
	TableColumnModel tcm = jTable1.getColumnModel();
	DefaultTableCellRenderer dtcr = 
	   ((DefaultTableCellRenderer) jTable1.getDefaultRenderer(Float.class));
	int width = dtcr.getFontMetrics(dtcr.getFont()).stringWidth("Mass \\ gradient");
	tcm.getColumn(0).setMinWidth(width);
	tcm.getColumn(0).setPreferredWidth(width);
	width = dtcr.getFontMetrics(dtcr.getFont()).charWidth('m') * 3;
	for (int i = 1; i < tcm.getColumnCount(); i++) {
	    tcm.getColumn(i).setMinWidth(width);
	    tcm.getColumn(i).setPreferredWidth(width);
	}
    }

    /** Creates new form SelectEngineJPanel */
    public SelectEngineJPanel() {
        initComponents();
        jList1ValueChanged(null); //Disable the ok button if no engine type is selected.
	setEngineType(null);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        okjButton = new javax.swing.JButton();
        canceljButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new org.railz.client.common.StretchableJTable();

        setLayout(new java.awt.BorderLayout(4, 4));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setVisibleRowCount(4);
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });

        jScrollPane1.setViewportView(jList1);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        okjButton.setText("OK");
        jPanel1.add(okjButton);

        canceljButton.setText("Cancel");
        jPanel1.add(canceljButton);

        add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText(org.railz.util.Resources.get("Top Speed / mph"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        jPanel2.add(jLabel1, gridBagConstraints);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane2.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        jPanel2.add(jScrollPane2, gridBagConstraints);

        add(jPanel2, java.awt.BorderLayout.EAST);

    }//GEN-END:initComponents
    
	private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) { //GEN-FIRST:event_jList1ValueChanged
            //We need to disable the OK button if no engine type is selected.
            
            if (-1 == jList1.getSelectedIndex()) {
                okjButton.setEnabled(false);
		setEngineType(null);
            } else {
                okjButton.setEnabled(true);
		setEngineType((EngineType) jList1.getSelectedValue());
            }
	} //GEN-LAST:event_jList1ValueChanged
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton canceljButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton okjButton;
    // End of variables declaration//GEN-END:variables
    
    final private class TrainCellRenderer implements ListCellRenderer {
        
        JLabel label;
        ViewLists viewLists;
        
        public TrainCellRenderer(ViewLists vl) {
            
            viewLists = vl;
            
            label = new JLabel();
        }
        
        public Component getListCellRendererComponent(
        JList list,
        Object value,
        /* value to display*/
        int index, /* cell index*/
        boolean isSelected, /* is the cell selected*/
        boolean cellHasFocus) /* the list and the cell have the focus*/ {
            
            EngineType engine = (EngineType) value;
            label.setFont(new java.awt.Font("Dialog", 0, 12));
            String text =
            "<html><body>"
            + (isSelected ? "<strong>" : "")
            + Resources.get(engine.getEngineTypeName()) + "<br>"
	    + "price: $" + engine.getPrice() + "<br>" +
	    "maintenance: $" + engine.getMaintenance() + "/year<br>"
	    + "fuel consumption: " + engine.getAnnualFuelConsumption() +
	    "/year"
            + (isSelected ? "</strong>" : "")
            + "</body></html>";
            label.setText(text);
	    NonNullElements i = new NonNullElements(KEY.ENGINE_TYPES,
		    modelRoot.getWorld(), Player.AUTHORITATIVE);
	    while (i.next()) {
		if (((EngineType) i.getElement()).getEngineTypeName().equals
			(engine.getEngineTypeName())) {
		    index = i.getIndex();
		}
	    }
            Image image = viewLists.getTrainImages().getSideOnEngineImage(index);
            int height = image.getHeight(null);
            int width = image.getWidth(null);
            int scale = height/50;
            ImageIcon icon = new ImageIcon(image.getScaledInstance(width/scale, height/scale, Image.SCALE_FAST));
            label.setIcon(icon);
            
            return label;
        }
    }
    
    public void setup(ModelRoot modelRoot,
	    ActionListener submitButtonCallBack) {
	this.modelRoot = modelRoot;
	ListModel w2lma = new
	    EngineTypeListModel(modelRoot.getWorld());
        jList1.setModel(w2lma);
        jList1.setCellRenderer(new TrainCellRenderer(modelRoot.getViewLists()));
	jList1.setPrototypeCellValue(w2lma.getElementAt(0));
        okjButton.addActionListener(submitButtonCallBack);
    }
    
    /** Removes any existing ActionListener listeners from the cancel button, then 
     *adds the specifed one.
     */ 
    void setCancelButtonActionListener(ActionListener l){
        ActionListener[] oldListeners = canceljButton.getActionListeners();
        for(int i = 0; i < oldListeners.length; i++){
            canceljButton.removeActionListener(oldListeners[i]);
        }
        this.canceljButton.addActionListener(l);
    }
    
    /** Returns the number of the currently selected engine type.
     *
     */
    public int getEngineType(){
	NonNullElements i = new NonNullElements(KEY.ENGINE_TYPES,
		modelRoot.getWorld(), Player.AUTHORITATIVE);
	while (i.next()) {
	    if (i.getElement().equals(jList1.getSelectedValue()))
		return i.getIndex();
	}

        return -1;
    }
}
