/*
 * Copyright (C) 2005 Robert Tuck
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package org.railz.client.view;

import java.awt.event.*;
import java.io.*;
import java.net.*;
import java.util.*;
import java.util.jar.*;
import java.util.logging.*;
import java.util.zip.*;
import javax.swing.*;

import org.railz.util.*;

/**
 * Provides information about modding the game, and provides an interface for
 * generating modding files.
 * @author  bob
 */
public class ModInfoPanel extends javax.swing.JPanel {
    private GUIRoot guiRoot;
    private Manifest manifest = null;
    private JarFile jarFile = null; 
    private ModdableResourceFinder mrf;
    private static final Logger logger = Logger.getLogger("global");
    
    private class GenerateModFiles implements ActionListener {
	public void actionPerformed(ActionEvent e) {
	    String messageTxt = "Created the following files:\n";
	    Enumeration i = jarFile.entries();
	    byte[] buffer = new byte[1024];
	    int bytesRead;
	    try {
		while (i.hasMoreElements()) {
		    ZipEntry ze = (ZipEntry) i.nextElement();
		    String s = ze.getName();
		    if (! ze.isDirectory() &&
			    (s.startsWith("org/railz/client/graphics") ||
			    s.startsWith("org/railz/server/data"))) {
			// copy this file from the jar to the system
			InputStream is = jarFile.getInputStream
			    (jarFile.getEntry(s));
			File f = mrf.getFileForWriting(s);
			OutputStream os = new FileOutputStream(f);
			while ((bytesRead = is.read(buffer)) >= 0) {
			    os.write(buffer, 0, bytesRead);
			}
			os.close();
			is.close();
			messageTxt += f.toString() + "\n";
		    }
		}
		JTextArea jta = new JTextArea(messageTxt, 10, 30);
		jta.setEditable(false);
		jta.setWrapStyleWord(true);
		jta.setLineWrap(true);
		JScrollPane jsp = new JScrollPane(jta,
			JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
			JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		JOptionPane jop = new JOptionPane(jsp,
			JOptionPane.INFORMATION_MESSAGE, 
			JOptionPane.DEFAULT_OPTION);
		guiRoot.getDialogueBoxController().showOptionPane(jop);

	    } catch (IOException ex) {
		logger.log(Level.WARNING, "Caught IOException: "
		       	+ ex.getMessage(), ex);
	    }
	}
    }

    /** Creates new form ModInfoPanel */
    public ModInfoPanel(GUIRoot gr) {
	guiRoot = gr;
        initComponents();
	// find our jar file
	URL resourceURL = getClass().getResource("ModInfoPanel.class");
	if ("jar".equals(resourceURL.getProtocol())) {
	    try {
		JarURLConnection urlc = (JarURLConnection)
		    resourceURL.openConnection();
		jarFile = urlc.getJarFile();
		manifest = urlc.getJarFile().getManifest();
	    } catch (IOException e) {
		logger.log(Level.WARNING, "Caught IOException: " +
		       	e.getMessage(), e);
		jButton1.setEnabled(false);
	    }
	}
	if (manifest == null) {
	    // disable the button if we are not running from the jar
	    jButton1.setEnabled(false);
	}
	mrf = new ModdableResourceFinder("");

	jButton1.addActionListener(new GenerateModFiles());
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        jTextArea1.setColumns(30);
        jTextArea1.setEditable(false);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText(org.railz.util.Resources.get("ModInfoDialogText"));
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setFocusable(false);
        jTextArea1.setOpaque(false);
        add(jTextArea1, java.awt.BorderLayout.CENTER);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText(org.railz.util.Resources.get("Modding Info"));
        add(jLabel1, java.awt.BorderLayout.NORTH);

        jButton1.setText(org.railz.util.Resources.get("Generate Modding Files"));
        add(jButton1, java.awt.BorderLayout.SOUTH);

    }//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
    
}
